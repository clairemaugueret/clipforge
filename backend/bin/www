#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require("../app");
const http = require("http");
const sequelize = require("../models/connection"); // Ton fichier connection.js

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

/**
 * Teste la connexion √† la base de donn√©es
 * puis d√©marre le serveur HTTP
 */
(async () => {
  try {
    await sequelize.authenticate();
    console.log(
      `‚úÖ Connexion √† la base MariaDB "${process.env.DB_NAME}" r√©ussie`
    );

    const server = http.createServer(app);

    server.listen(port);
    server.on("error", onError);
    server.on("listening", onListening);
  } catch (err) {
    console.error("‚ùå Connexion DB √©chou√©e :", err.message);
    process.exit(1); // Stoppe le process si la connexion √©choue
  }
})();

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const portNum = parseInt(val, 10);
  if (isNaN(portNum)) return val; // named pipe
  if (portNum >= 0) return portNum; // port number
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== "listen") throw error;

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(`${bind} n√©cessite des privil√®ges √©lev√©s`);
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(`${bind} est d√©j√† utilis√©`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = this.address();
  const bind = typeof addr === "string" ? `pipe ${addr}` : `port ${addr.port}`;
  console.log(`üöÄ Serveur backend d√©marr√© et en √©coute sur ${bind}`);
}
